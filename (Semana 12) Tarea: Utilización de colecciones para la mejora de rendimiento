class Libro:
    def __init__(self, titulo, autor, categoria, isbn):
        self.titulo = titulo
        self.autor = autor  # Tupla (nombre, apellido)
        self.categoria = categoria
        self.isbn = isbn

    def __str__(self):
        return f"Título: {self.titulo}, Autor: {self.autor[0]} {self.autor[1]}, Categoría: {self.categoria}, ISBN: {self.isbn}"


class Usuario:
    def __init__(self, nombre, id_usuario):
        self.nombre = nombre
        self.id_usuario = id_usuario
        self.libros_prestados = []

    def __str__(self):
        return f"Nombre: {self.nombre}, ID: {self.id_usuario}, Libros prestados: {len(self.libros_prestados)}"

    def prestar_libro(self, libro):
        self.libros_prestados.append(libro)

    def devolver_libro(self, libro):
        if libro in self.libros_prestados:
            self.libros_prestados.remove(libro)


class Biblioteca:
    def __init__(self):
        self.libros = {}  # Diccionario: ISBN -> Libro
        self.usuarios = set()  # Conjunto de IDs de usuario
        self.usuarios_data = {} # Diccionario: ID de usuario -> Usuario

    def agregar_libro(self, libro):
        if libro.isbn not in self.libros:
            self.libros[libro.isbn] = libro
            print(f"Libro '{libro.titulo}' agregado a la biblioteca.")
        else:
            print(f"Ya existe un libro con el ISBN {libro.isbn}.")

    def quitar_libro(self, isbn):
        if isbn in self.libros:
            del self.libros[isbn]
            print(f"Libro con ISBN {isbn} eliminado de la biblioteca.")
        else:
            print(f"No se encontró un libro con el ISBN {isbn}.")

    def registrar_usuario(self, usuario):
        if usuario.id_usuario not in self.usuarios:
            self.usuarios.add(usuario.id_usuario)
            self.usuarios_data[usuario.id_usuario] = usuario
            print(f"Usuario '{usuario.nombre}' registrado con ID {usuario.id_usuario}.")
        else:
            print(f"Ya existe un usuario con el ID {usuario.id_usuario}.")

    def dar_baja_usuario(self, id_usuario):
        if id_usuario in self.usuarios:
            self.usuarios.remove(id_usuario)
            del self.usuarios_data[id_usuario]
            print(f"Usuario con ID {id_usuario} dado de baja.")
        else:
            print(f"No se encontró un usuario con el ID {id_usuario}.")

    def prestar_libro(self, id_usuario, isbn):
        if id_usuario in self.usuarios and isbn in self.libros:
            usuario = self.usuarios_data[id_usuario]
            libro = self.libros[isbn]
            if libro not in usuario.libros_prestados:
                usuario.prestar_libro(libro)
                print(f"Libro '{libro.titulo}' prestado a {usuario.nombre}.")
            else:
                print(f"{usuario.nombre} ya tiene prestado el libro '{libro.titulo}'.")
        else:
            print("Usuario o libro no encontrado.")

    def devolver_libro(self, id_usuario, isbn):
        if id_usuario in self.usuarios and isbn in self.libros:
            usuario = self.usuarios_data[id_usuario]
            libro = self.libros[isbn]
            if libro in usuario.libros_prestados:
                usuario.devolver_libro(libro)
                print(f"Libro '{libro.titulo}' devuelto por {usuario.nombre}.")
            else:
                print(f"{usuario.nombre} no tiene prestado el libro '{libro.titulo}'.")
        else:
            print("Usuario o libro no encontrado.")

    def buscar_libros(self, criterio, valor):
        resultados = []
        for libro in self.libros.values():
            if criterio == "titulo" and valor.lower() in libro.titulo.lower():
                resultados.append(libro)
            elif criterio == "autor" and valor.lower() in f"{libro.autor[0]} {libro.autor[1]}".lower():
                resultados.append(libro)
            elif criterio == "categoria" and valor.lower() in libro.categoria.lower():
                resultados.append(libro)
        return resultados

    def listar_libros_prestados(self, id_usuario):
        if id_usuario in self.usuarios:
            usuario = self.usuarios_data[id_usuario]
            return usuario.libros_prestados
        else:
            return None


# Ejemplo de uso
biblioteca = Biblioteca()

libro1 = Libro("Cien años de soledad", ("Gabriel", "García Márquez"), "Novela", "9780061120084")
libro2 = Libro("1984", ("George", "Orwell"), "Ciencia ficción", "9780451524935")
biblioteca.agregar_libro(libro1)
biblioteca.agregar_libro(libro2)

usuario1 = Usuario("Ana García", "AG123")
usuario2 = Usuario("Carlos Pérez", "CP456")
biblioteca.registrar_usuario(usuario1)
biblioteca.registrar_usuario(usuario2)

biblioteca.prestar_libro("AG123", "9780061120084")
biblioteca.prestar_libro("CP456", "9780451524935")

print(f"Libros prestados a Ana: {biblioteca.listar_libros_prestados('AG123')}")
print(f"Libros prestados a Carlos: {biblioteca.listar_libros_prestados('CP456')}")

biblioteca.devolver_libro("AG123", "9780061120084")

print(f"Libros prestados a Ana después de la devolución: {biblioteca.listar_libros_prestados('AG123')}")

print(f"Búsqueda de libros por autor 'George': {biblioteca.buscar_libros('autor', 'George')}")
